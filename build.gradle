buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("com.google.guava:guava:31.0.1-jre")
        classpath("commons-io:commons-io:2.11.0")
    }
}


import com.modrinth.minotaur.TaskModrinthUpload
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    alias(libs.plugins.curse)
    alias(libs.plugins.modrinth)
    alias(libs.plugins.names)
}

allprojects {
    apply plugin: "java"

    java.toolchain.languageVersion = JavaLanguageVersion.of(17)

    tasks.withType(JavaCompile) {
        options.encoding = "UTF-8"
        options.compilerArgs = ["-Xlint:deprecation"]
    }

    dependencies {
        compileOnly(libs.lombok)
        annotationProcessor(libs.lombok)
    }

    repositories {
        mavenCentral()
        maven {
            name = "Minecraft Libraries"
            url = uri("https://libraries.minecraft.net")
        }
        maven {
            name = 'CurseForge'
            url = 'https://minecraft.curseforge.com/api/maven'
        }
        maven {
            name = "ModMenu"
            url = "https://maven.terraformersmc.com/releases/"
        }
        maven {
            name = "Cloth Config"
            url = "https://maven.shedaniel.me/"
        }
    }
}

group = "fr.raksrinana"
archivesBaseName = "${project.modName}-${project.minecraft_version}"

task buildJar(type: Jar, group: "modding") {
    dependsOn assemble, ":common:build",
            ":fabric:build"//,
//            ":forge:build" //TODO: Renable for 1.18
//    finalizedBy ":forge:signJar" //TODO: Renable for 1.18

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    from zipTree("common/build/libs/common-${project.version}.jar"),
            zipTree("fabric/build/libs/fabric-${project.version}.jar")//,
//            zipTree("forge/build/libs/forge-${project.version}.jar") //TODO: Renable for 1.18

    manifest {
        attributes([
                "Specification-Title"     : project.modId,
                "Specification-Vendor"    : "RakSrinaNa",
                "Specification-Version"   : project.version,
                "Implementation-Title"    : project.modName,
                "Implementation-Version"  : "${project.version}",
                "Implementation-Vendor"   : "RakSrinaNa",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
assemble.finalizedBy("buildJar")

curseforge {
    apiKey = "${project.findProperty("curseforgeApiKey")}"
    project {
        id = "${project.curseforge_project_id}"
        changelogType = "markdown"
        addGameVersion project.minecraft_version
        addGameVersion "Java 17"
        addGameVersion "Fabric"
//        addGameVersion "Forge" //TODO: Renable for 1.18
        changelog = project.findProperty("changelog") ?: "No changelog provided"
        releaseType = "${project.releaseType}"
        mainArtifact(jar) {
            displayName = "${project.minecraft_version}-${project.version}"
        }
        relations {
            //Fabric
            optionalDependency("fabric-api") //It's actually required
            optionalDependency("modmenu")
            embeddedLibrary("cloth-config")

            //Forge
            optionalDependency("cloth-config-forge")
        }
    }
    options {
        javaVersionAutoDetect = false
        javaIntegration = false
        forgeGradleIntegration = false
    }
}

task publishModrinth(type: TaskModrinthUpload, group: "upload") {
    dependsOn build

    token = project.findProperty("modrinthToken") as String
    projectId = project.modrinth_project_id
    versionNumber = "${project.minecraft_version}-${project.version}"
    versionName = "${project.minecraft_version}-${project.version}"
    uploadFile = jar
    addGameVersion(project.minecraft_version as String)
    addLoader("fabric")
//    addLoader("forge") //TODO: Renable for 1.18
    versionType = project.releaseType.toLowerCase()
    changelog = project.findProperty("changelog") ?: "No changelog provided"
}

def writeUpdateJson() {
    def version = project.version
    def mcVersion = project.minecraft_version
    def slurper = new JsonSlurper()
    def file = project.file("update.json")
    def json = slurper.parse(file)
    def changelogUrl = "https://github.com/${project.repoUser}/${project.repoName}/releases"

    if(!mcVersion.contains("w")) {
        json["changelog"] = changelogUrl

        // TODO: Maybe add something to create an abbreviated changelog? May not be useful...
        json.putIfAbsent(mcVersion, new HashMap<>())
        json[mcVersion].putIfAbsent(version, changelogUrl + "/" + version)
        json[mcVersion] = json[mcVersion].sort([compare: { a, b -> a.compareTo(b) }] as Comparator)
        json["promos"]["${mcVersion}-latest"] = version
        json["promos"]["${mcVersion}-recommended"] = version

        println(json)
        file.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)))
    }
}

task createUpdateJson(group: "modding") {
    doLast {
        println("Updating update.json...")
        writeUpdateJson()
    }
}
build.finalizedBy createUpdateJson
